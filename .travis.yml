sudo: false

language: php

git:
  depth: 1

notifications:
  email: false

matrix:
  # - Lint PHP once per PHP version.
  #
  # - Run `phpunit` for each version of PHP and WordPress in single- and multisite.
  #
  # - Run `qunit:recent` once. The `recent` task handles running tests against
  #   different versions of WordPress. If we switch to WP_VERSION=x.y.z we could
  #   instead run `qunit:specific --wp=$WP_VERSION` so that control over which
  #   versions are tested stays in this config.
  include:
    - php: 5.3
      env: WP_VERSION=latest PHP_LINT=1
      dist: precise

    - php: 5.6
      env: WP_VERSION=latest PHP_LINT=1

    - php: 7.0
      env: WP_VERSION=trunk QUNIT_RECENT=1
    - php: 7.0
      env: WP_VERSION=latest PHP_LINT=1

    - php: 7.1
      env: WP_VERSION=latest PHP_LINT=1

before_script:
  - export PATH="$HOME/.composer/vendor/bin:$PATH"
  - export WP_CORE_DIR=/tmp/wordpress

  - |
    if [[ ${TRAVIS_PHP_VERSION:0:2} == "7." ]]; then
      composer global require "phpunit/phpunit=5.7.*"
    else
      composer global require "phpunit/phpunit=4.8.*"
    fi

  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

  - git clone --depth=1 https://github.com/alleyinteractive/wordpress-fieldmanager $WP_CORE_DIR/wp-content/plugins/wordpress-fieldmanager

  - |
    if [[ "$QUNIT_RECENT" == "1" ]]; then
      npm install
    fi

script:
  - |
    if [[ "$PHP_LINT" == "1" ]]; then
      find . -type "f" -iname "*.php" | xargs -L "1" php -l
    fi

  - |
    if [[ "$QUNIT_RECENT" == "1" ]]; then
      grunt qunit:recent
    fi

  - export WP_MULTISITE=0 && phpunit
  - export WP_MULTISITE=1 && phpunit
